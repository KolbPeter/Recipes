@using RecipesPWA.Common.Recipes
@using RecipesPWA.Common.Components
@using RecipesPWA.Common
@inherits GenericForm<Recipe>

<EditForm class="recipe"
          EditContext="@_editContext"
          OnValidSubmit="() => InvokeValueChangedCallback(TValue)"
          OnInvalidSubmit="() => InvokeValueChangedCallback(BackupValue)">
    <DataAnnotationsValidator/>
    
    <InputText class="input-field input-field-30percent" @bind-Value="@TValue.Name" placeholder="Recept:" />
    <SubRecipesForm @bind-Value="@TValue.SubRecipes" Values="@TValue.SubRecipes" />
    <InputTextArea class="input-field text-input-wide" @bind-Value="@Instruction" />

    <button class="submit-button input-field-10percent" type="submit" onclick="@OnMouseClick">@ButtonText</button>

</EditForm>

@code {
    public string Instruction
    {
        get => TValue is null
            ? string.Empty
            : string.Join(Environment.NewLine, TValue.Instructions);
        set
        {
            if (!string.IsNullOrEmpty(value) )
            {
                TValue.Instructions = value
                    .Split(Environment.NewLine)
                    .Where(x => !string.IsNullOrEmpty(x));
            }
        }
    }

    public override bool MustBeRemoved()
    {
        return string.IsNullOrEmpty(TValue?.Name ?? null);
    }

    public override Recipe ResetValue()
    {
        return new () { Name = TValue?.Name ?? string.Empty, Instructions = Array.Empty<string>(), SubRecipes = Array.Empty<SubRecipe>() };
    }

    protected override string SubmitButtonText(bool isNew, bool isDeleted)
    {
        return "Feltölt";
    }

    private void OnMouseClick()
    {
        var validationResult = _editContext.Validate();

        if (validationResult)
        {
            base.InvokeValueChangedCallback(TValue);
        }
    }

    protected override void OnParametersSet()
    {
        TValue ??= new Recipe
        {
            Name = TValue?.Name ?? string.Empty,
            Instructions = TValue?.Instructions ?? Array.Empty<string>(),
            SubRecipes = TValue?.SubRecipes ?? Array.Empty<SubRecipe>(),
        };
        base.OnParametersSet();
    }

    private void DescriptionChanged(ChangeEventArgs obj)
    {
        var value = obj.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(value) || TValue is null)
        {
            return;
        }

        TValue.Instructions = value.Split(Environment.NewLine);
    }
}